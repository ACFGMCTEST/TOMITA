#version 120
uniform vec3 LightVec;
uniform vec3 LightAmbientColor;
uniform vec3 LightDiffuseColor;
uniform vec3 EyeVec;
uniform vec4 Ambient;
uniform vec4 Diffuse;
uniform vec4 ColorRGBA;
uniform vec3 Specular;
uniform vec3 Emissive;
uniform float Pow;
uniform float cnt;

//頂点シェーダーから受け取る変数
varying vec3 N;//法線ベクトル
uniform sampler2D Sampler;
uniform int TextureFlg;

void main(void)
{

	float NL = dot(N, LightVec); 
	vec3 reflect = normalize(2 * NL * N - LightVec);
	float specular = pow(clamp(dot(reflect, EyeVec),0,1.0), Pow);

	vec4 texColor;
	if(TextureFlg == -1)
	{
		texColor = vec4(1.0,1.0,1.0,1.0);
	}
	else
	{
		texColor = texture2D(Sampler, gl_TexCoord[0].st);

	//NL = (NL>0.5) ? 1.0:0;
	}
   
   /*
	gl_FragColor= texColor *
	 (Diffuse * clamp(NL,0,1.0)* 
	 vec4(LightDiffuseColor,1.0)+
	  Ambient * vec4(LightAmbientColor,1.0) + 
	  vec4(specular * Specular + Emissive,1.0) + vec4(ColorRGBA));
	  */

	  
	gl_FragColor = 
	 gl_Color * (clamp(NL,0,1.0) * vec4(LightDiffuseColor,1.0) + vec4(LightAmbientColor,1.0));

//	gl_FragColor= texColor;
}
